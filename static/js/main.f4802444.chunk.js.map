{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multiplier","st","recovered","deaths","sortData","data","casesType","sortedData","sort","a","b","Map","countries","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","numeral","format","showDataMap","Table","LineGraph","useState","setData","useEffect","fetch","then","response","json","buildChartData","fetchData","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","lastDataPoint","chartData","date","newDataPoint","x","y","push","length","datasets","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","countryName","setCountryName","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","console","log","name","iso2","getCountriesData","onCountryChanged","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2aAyBeA,MAnBf,YAAmD,IAAjCC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,yCAC9C,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,UAAUC,QAASH,EAAMG,SACrC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYH,UAAU,iBAAiBI,MAAM,iBACxCT,GAGL,kBAACQ,EAAA,EAAD,CAAYH,UAAU,iBAAiBI,MAAM,iBACxCP,EADL,UAIA,wBAAIG,UAAU,kBAAkBJ,M,uECd1CS,EAAkB,CACpBT,MAAO,CACHU,IAAK,UACLC,WAAY,IACZC,GAAI,YAERC,UAAW,CACPH,IAAK,UACLC,WAAY,KACZC,GAAI,aAERE,OAAQ,CACJJ,IAAK,UACLC,WAAY,IACZC,GAAI,WAICG,EAAW,SAACC,GAA4B,IAAtBC,EAAqB,uDAAX,QAC/BC,EAAU,YAAOF,GASvB,OARAE,EAAWC,MAAK,SAACC,EAAGC,GAChB,OAAID,EAAEH,GAAaI,EAAEJ,IACT,EAGD,KAGRC,GCZII,MAdf,YAA4D,IAA9CC,EAA6C,EAA7CA,UAAWC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,KAA0B,IAApBR,iBAAoB,MAAV,QAAU,EACvD,OACI,yBAAKb,UAAU,OACX,kBAAC,IAAD,CAAYoB,OAAQA,EAAQC,KAAMA,GAC9B,kBAACC,EAAA,EAAD,CACIC,IAAI,qDACJC,YAAY,wEDuBL,SAACZ,GAAD,IAAOC,EAAP,uDAAiB,QAAjB,OACvBD,EAAKa,KAAI,SAAAC,GAAO,OACZ,kBAACC,EAAA,EAAD,CACIP,OAAQ,CAACM,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACtDC,YAAa,GACb3B,MAAOC,EAAgBQ,GAAWP,IAClC0B,UAAW3B,EAAgBQ,GAAWP,IACtC2B,OAAQC,KAAKC,KAAKT,EAAQb,IAAcR,EAAgBQ,GAAWN,YAEnE,kBAAC6B,EAAA,EAAD,KACI,6BAAMV,EAAQA,SACd,4BAAKrB,EAAgBQ,GAAWL,IAChC,4BAAK6B,IAAQX,EAAQb,IAAYyB,OAAO,aCjCvCC,CAAYpB,EAAWN,M,OCGzB2B,MAbf,YAAgD,IAAhCrB,EAA+B,EAA/BA,UAA+B,IAApBN,iBAAoB,MAAV,QAAU,EAC3C,OACI,yBAAKb,UAAU,SACVmB,EAAUM,KAAI,SAAAC,GAAO,OAClB,4BACI,4BAAKA,EAAQA,SACb,4BAAI,gCAASW,IAAQX,EAAQb,IAAYyB,OAAO,e,yBCsFrDG,MA3Ff,YAAwC,EAApB5B,UAAqB,IAAD,EAEZ6B,mBAAS,IAFG,mBAE7B9B,EAF6B,KAEvB+B,EAFuB,KAIpCC,qBAAU,YACS,uCAAG,sBAAA5B,EAAA,sEACR6B,MAAM,8DACXC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAlC,GACF+B,EAAQM,EAAerC,EAAM,aAJnB,2CAAH,qDAOfsC,KACF,IAEF,IAAMC,EAAU,CACZC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,MAAO,CACHtB,OAAQ,IAGhBuB,qBAAqB,EACrBC,SAAS,CACLC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAASC,EAAalD,GACzB,OAAOyB,IAAQyB,EAAYC,OAAOzB,OAAO,WAIrD0B,OAAQ,CACJC,MAAM,CACF,CACIC,KAAM,OACNC,KAAM,CACF7B,OAAQ,aACR8B,cAAe,QAI3BC,MAAO,CACH,CACIC,UAAW,CACPjB,SAAS,GAEbkB,MAAO,CACHC,SAAU,SAAST,EAAOU,EAAOC,GAC7B,OAAOrC,IAAQ0B,GAAOzB,OAAO,YAQ/CW,EAAiB,SAACrC,EAAMC,GAC1B,IACI8D,EADEC,EAAY,GAElB,IAAI,IAAIC,KAAQjE,EAAKhB,MAAM,CACvB,GAAG+E,EAAc,CACb,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGpE,EAAKC,GAAWgE,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgB/D,EAAKC,GAAWgE,GAEpC,OAAOD,GAEX,OACI,8BACS,OAAJhE,QAAI,IAAJA,OAAA,EAAAA,EAAMsE,QAAS,GACZ,kBAAC,OAAD,CACA/B,QAAWA,EACXvC,KAAQ,CACJuE,SAAU,CAAC,CACPC,YAAa,UACbxE,KAAMA,S,OC0CfyE,MAtHf,WAAgB,IAAD,EAEoB3C,mBAAS,IAF7B,mBAEPvB,EAFO,KAEImE,EAFJ,OAGgB5C,mBAAS,aAHzB,mBAGPhB,EAHO,KAGE6D,EAHF,OAIwB7C,mBAAS,IAJjC,mBAIPd,EAJO,KAIM4D,EAJN,OAKoB9C,mBAAS,IAL7B,mBAKP+C,EALO,KAKIC,EALJ,OAMwBhD,mBAAS,aANjC,mBAMPiD,EANO,KAMMC,EANN,OAOoBlD,mBAAS,CAACb,IAAK,SAAUgE,KAAM,UAPnD,mBAOPC,EAPO,KAOIC,EAPJ,OAQgBrD,mBAAS,GARzB,mBAQPsD,EARO,KAQEC,EARF,OAS0BvD,mBAAS,IATnC,mBASPwD,EATO,KASOC,EATP,OAUoBzD,mBAAS,SAV7B,mBAUP7B,EAVO,KAUIuF,EAVJ,KAYdC,QAAQC,IAAIJ,GAEZtD,qBAAU,WACTC,MAAM,sCACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAlC,GACL4E,EAAe5E,QAEf,IAEFgC,qBAAU,YACa,uCAAG,sBAAA5B,EAAA,sEAClB6B,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAClC,GACNuF,EAAgBvF,GAChB,IAAMO,EAAYP,EAAKa,KAAI,SAACC,GAAD,MAC1B,CACC6E,KAAM7E,EAAQA,QACdqC,MAAOrC,EAAQE,YAAY4E,SAG7Bd,EAAa/E,EAASC,EAAKC,IAC3ByE,EAAanE,MAZU,2CAAH,qDAgBtBsF,KACE,IAEH,IAAMC,EAAgB,uCAAG,WAAOC,GAAP,iBAAA3F,EAAA,6DAClB4F,EAAcD,EAAME,OAAO9C,MAE3BxC,EAAsB,cAAhBqF,EAA8B,qCAA9B,mDAAiHA,GAHrG,SAKlB/D,MAAMtB,GACXuB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAlC,GACLyF,QAAQC,IAAI1F,EAAKc,SAEG,cAAhBkF,GACHb,EAAa,CAAClE,IAAK,SAAUgE,KAAM,UACnCI,EAAW,KAGXF,EAAa,CAACnF,EAAKgB,YAAYC,IAAKjB,EAAKgB,YAAYE,OACrDmE,EAAW,IAGZL,EAAehF,EAAKc,SACpB6D,EAAWqB,GACXpB,EAAe5E,MArBQ,2CAAH,sDA8BtB,OALAyF,QAAQC,IAAI1E,GAMX,yBAAK5B,UAAU,OACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,eACd,gDACA,4BAAK2F,GACL,kBAACmB,EAAA,EAAD,CAAa9G,UAAU,iBACtB,kBAAC+G,EAAA,EAAD,CAAQC,QAAQ,WAAWjD,MAAOrC,EAASuF,SAAYP,GACtD,kBAACQ,EAAA,EAAD,CAAUnD,MAAM,aAAhB,aAEC5C,EAAUM,KAAI,SAAAC,GAAO,OACpB,kBAACwF,EAAA,EAAD,CAAUnD,MAAOrC,EAAQqC,OAAQrC,EAAQ6E,YAO9C,yBAAKvG,UAAU,cACd,kBAAC,EAAD,CAASC,QAAS,SAAAkH,GAAC,OAAIf,EAAa,UAAUzG,MAAM,QAAQC,MAAOyC,IAAQT,EAAYwF,YAAY9E,OAAO,QAASzC,MAAOwC,IAAQT,EAAYhC,OAAO0C,OAAO,SAC5J,kBAAC,EAAD,CAASrC,QAAS,SAAAkH,GAAC,OAAIf,EAAa,cAAczG,MAAM,YAAYC,MAAOyC,IAAQT,EAAYyF,gBAAgB/E,OAAO,QAASzC,MAAOwC,IAAQT,EAAYnB,WAAW6B,OAAO,SAC5K,kBAAC,EAAD,CAASrC,QAAS,SAAAkH,GAAC,OAAIf,EAAa,WAAWzG,MAAM,SAASC,MAAOyC,IAAQT,EAAY0F,aAAahF,OAAO,QAASzC,MAAOwC,IAAQT,EAAYlB,QAAQ4B,OAAO,UAGjK,kBAAC,EAAD,CACCnB,UAAW+E,EACX9E,OAAQ0E,EACRzE,KAAQ2E,EACRnF,UAAWA,KAIb,kBAACd,EAAA,EAAD,CAAMC,UAAU,cACf,kBAACE,EAAA,EAAD,KACC,oDAEA,kBAAC,EAAD,CAAOiB,UAAWsE,EAAW5E,UAAWA,IACxC,6CAEA,kBAAC,EAAD,CAAWA,UAAWA,QC9GP0G,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrF,MAAK,SAAAsF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.f4802444.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardContent, Typography, createMuiTheme} from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\n\n\nfunction InfoBox({title, cases, total, ...props}) {\n    return (\n        <Card className=\"infoBox\" onClick={props.onClick}>\n            <CardContent>\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n\n                <h2 className=\"infoBox__cases\">{cases}</h2>\n\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport {Circle, Popup} from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        multiplier: 800,\n        st: \"Infected\"\n    },\n    recovered: {\n        hex: \"#7DD71D\",\n        multiplier: 1200,\n        st: \"Recovered\"\n    },\n    deaths: {\n        hex: \"#FB4443\",\n        multiplier: 2000,\n        st: \"Deaths\"\n    },\n};\n\nexport const sortData = (data, casesType='cases') =>{\n    const sortedData = [...data];\n    sortedData.sort((a, b)=>{\n        if (a[casesType] > b[casesType]){\n            return -1;\n        }\n        else {\n            return 1;\n        }\n    })\n    return sortedData;\n}\n\nexport const showDataMap = (data, casesType='cases') => (\n    data.map(country=>(\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.3}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\n        >\n            <Popup>\n                <div>{country.country}</div>\n                <h3>{casesTypeColors[casesType].st}</h3>\n                <h4>{numeral(country[casesType]).format(\"0,0\")}</h4>\n            </Popup>\n        </Circle>\n    ))\n);","import React from 'react'\nimport \"./Map.css\"\nimport {Map as LeafletMap, TileLayer} from \"react-leaflet\";\nimport {showDataMap} from \"./util\";\n\n\nfunction Map({countries, center, zoom, casesType=\"cases\"}) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreet</a> contributors'    \n                />\n                {showDataMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map\n","import React from 'react';\nimport './Table.css';\nimport numeral from \"numeral\";\n\nfunction Table({countries, casesType='cases'}) {\n    return (\n        <div className=\"table\">\n            {countries.map(country =>(\n                <tr>\n                    <td>{country.country}</td>\n                    <td><strong>{numeral(country[casesType]).format(\"0,0\")}</strong></td>\n                </tr>\n            ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, {useState, useEffect} from 'react';\nimport {Line} from \"react-chartjs-2\"; \nimport { findAllByTestId } from '@testing-library/react';\nimport numeral from \"numeral\";\n\nfunction LineGraph({casesType=\"cases\"}) {\n\n    const [data, setData] = useState({});\n\n    useEffect(()=>{\n        const fetchData = async() => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n            .then(response=>response.json())\n            .then(data=>{\n                setData(buildChartData(data, \"cases\"));\n            });\n        }\n        fetchData();\n    },[])\n\n    const options = {\n        legend: {\n            display: false,\n        },\n        elements: {\n            point: {\n                radius: 0,\n            },\n        },\n        maintainAspectRatio: false,\n        tooltips:{\n            mode: \"index\",\n            intersect: false,\n            callbacks: {\n                label: function(tooltipItem, data){\n                    return numeral(tooltipItem.value).format(\"+0,0\");\n                },\n            },\n        },\n        scales: {\n            xAxes:[\n                {\n                    type: \"time\",\n                    time: {\n                        format: \"MM/DD/YYYY\",\n                        tooltipFormat: \"ll\",\n                    },\n                },\n            ],\n            yAxes: [\n                {\n                    gridLines: {\n                        display: false,\n                    },\n                    ticks: {\n                        callback: function(value, index, values){\n                            return numeral(value).format(\"0a\");\n                        }\n                    }\n                }\n            ]\n        }\n    }\n\n    const buildChartData = (data, casesType) => {\n        const chartData = [];\n        let lastDataPoint;\n        for(let date in data.cases){\n            if(lastDataPoint){\n                const newDataPoint = {\n                    x: date, \n                    y: data[casesType][date] - lastDataPoint\n                }\n                chartData.push(newDataPoint) \n            }\n            lastDataPoint = data[casesType][date];\n        };\n        return chartData;\n    }\n    return (\n        <div>\n            {data?.length > 0 && (\n                <Line \n                options = {options}\n                data = {{\n                    datasets: [{\n                        borderColor: \"#ff5733\",\n                        data: data,\n                    }]\n                }}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph\n","import React, {useState, useEffect} from 'react';\nimport {FormControl, Select, MenuItem, Menu, CardContent, Card} from \"@material-ui/core\"\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport {sortData} from \"./util\";\nimport './App.css';\nimport LineGraph from './LineGraph';\nimport numeral from \"numeral\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n\n\tconst [countries, setCountries] = useState([]);\n\tconst [country, setCountry] = useState('worldwide');\n\tconst [countryInfo, setCountryInfo] = useState({});\n\tconst [tableData, setTableData] = useState([]);\n\tconst [countryName, setCountryName] = useState('Worldwide');\n\tconst [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n\tconst [mapZoom, setMapZoom] = useState(3);\n\tconst [mapCountries, setMapCountries] = useState([]);\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\n\tconsole.log(mapCountries);\n\n\tuseEffect(()=>{\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t.then(response=>response.json())\n\t\t.then(data=>{\n\t\t\tsetCountryInfo(data);\n\t\t})\n\t},[])\n\n\tuseEffect(()=>{\n\t\tconst getCountriesData = async ()=> {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetMapCountries(data);\n\t\t\t\tconst countries = data.map((country)=>(\n\t\t\t\t\t{\n\t\t\t\t\t\tname: country.country,\n\t\t\t\t\t\tvalue: country.countryInfo.iso2\n\t\t\t\t\t}\n\t\t\t\t));\n\t\t\t\tsetTableData(sortData(data,casesType));\n\t\t\t\tsetCountries(countries)\n\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\t}, [])\n\n\tconst onCountryChanged = async (event) => {\n\t\tconst countryCode = event.target.value;\n\n\t\tconst url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n\t\tawait fetch(url)\n\t\t.then(response => response.json())\n\t\t.then(data=>{\n\t\t\tconsole.log(data.country);\n\n\t\t\tif (countryCode === \"worldwide\"){\n\t\t\t\tsetMapCenter({lat: 34.80746, lng: -40.4796});\n\t\t\t\tsetMapZoom(3);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\tsetMapZoom(5);\n\t\t\t}\n\n\t\t\tsetCountryName(data.country);\n\t\t\tsetCountry(countryCode);\n\t\t\tsetCountryInfo(data);\n\t\t});\n\t}\n\n\tconsole.log(countryInfo);\n\n\t//https://disease.sh/v3/covid-19/all\n\t//https://disease.sh/v3/covid-19/countries/[COUNTRY_CODE]\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t\t<h1>{countryName}</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select variant=\"outlined\" value={country} onChange = {onCountryChanged}>\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcountries.map(country => (\n\t\t\t\t\t\t\t\t\t<MenuItem value={country.value}>{country.name}</MenuItem>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<InfoBox onClick={e => setCasesType(\"cases\")} title=\"Cases\" cases={numeral(countryInfo.todayCases).format(\"+0,0\")} total={numeral(countryInfo.cases).format(\"0,0\")}/>\n\t\t\t\t\t<InfoBox onClick={e => setCasesType(\"recovered\")} title=\"Recovered\" cases={numeral(countryInfo.todayRecovered).format(\"+0,0\")} total={numeral(countryInfo.recovered).format(\"0,0\")}/>\n\t\t\t\t\t<InfoBox onClick={e => setCasesType(\"deaths\")} title=\"Deaths\" cases={numeral(countryInfo.todayDeaths).format(\"+0,0\")} total={numeral(countryInfo.deaths).format(\"0,0\")}/>\n\t\t\t\t</div>\n\n\t\t\t\t<Map\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom = {mapZoom}\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases Worldwide</h3>\n\t\t\t\t\t{/* Table */}\n\t\t\t\t\t<Table countries={tableData} casesType={casesType} />\n\t\t\t\t\t<h3>Cases Per Day</h3>\n\t\t\t\t\t{/* Graph */}\n\t\t\t\t\t<LineGraph casesType={casesType}/>\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}